package client;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.TableView.TableCell;

import shared.model.field;

public class TableTab2 extends JPanel{

	BatchState bs;
	JTable table;
	private TableModel tm;
	Map<Integer, Set<String>> knownvalues;
	
	public TableTab2(BatchState batch)
	{
		bs = batch;
		setLayout(new BorderLayout());
	}
	
	public void initialize(int numofrecs, List<field> fields)
	{
		tm = new TableModel(numofrecs, fields, bs);
		
		knownvalues = bs.known;
		table = new JTable(tm);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		table.setCellSelectionEnabled(true);
		table.getTableHeader().setReorderingAllowed(false);
		table.addMouseListener(mouseAdapter);
		
		TableColumnModel columnModel = table.getColumnModel();
		for (int i = 0; i < tm.getColumnCount(); ++i) {
			TableColumn column = columnModel.getColumn(i);
			column.setPreferredWidth(150);
		}
		
		for (int i = 0; i < tm.getColumnCount(); ++i) {
			TableColumn column = columnModel.getColumn(i);
			column.setCellRenderer(new TRenderer(bs));
		}
		
		add(table.getTableHeader(), BorderLayout.NORTH);
		add(table, BorderLayout.CENTER);
	}
	
	private MouseAdapter mouseAdapter = new MouseAdapter() {

		@Override
		public void mouseReleased(MouseEvent e) {

			if (e.isPopupTrigger()) {
				
				
			}
		}
		
		public void mousePressed(MouseEvent e)
		{
			if(e.getButton() == MouseEvent.BUTTON3)
		    {
				final int row = table.rowAtPoint(e.getPoint());
				final int column = table.columnAtPoint(e.getPoint());
				//System.out.println("row: " + row);
				//System.out.println("column: " + column);
				String val = bs.values[row][column];
				//System.out.println(val);
				
				Set<String> dict = knownvalues.get(column);
				val = val.toUpperCase();
				if(!dict.contains(val))
				{
					System.out.println("Eureka");
					JPopupMenu pop = new JPopupMenu();
					
					JMenuItem seesug = new JMenuItem("See Suggestions");
					pop.add(seesug);
					
					pop.addPopupMenuListener(new PopupPrintListener());
					//pop.setBorder(new BevelBorder(BevelBorder.RAISED));
					maybeShowPopup(e, pop);
					
				}
		    }
		}
		
		private void maybeShowPopup(MouseEvent e, JPopupMenu popup) {
	        if (e.isPopupTrigger()) {
	            popup.show(e.getComponent(),
	                       e.getX(), e.getY());
	        }
	    }
	};
	
	class TRenderer extends JLabel implements TableCellRenderer 
	{
		private Border unselectedBorder = BorderFactory.createLineBorder(Color.BLACK, 0);
		private Border selectedBorder = BorderFactory.createLineBorder(Color.BLACK, 1);
		BatchState bs;
		
		public TRenderer(BatchState batch)
		{
			bs = batch;
			setOpaque(true);
		}
		
		@Override
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row,
				int column) {
			
			
			
			if(isSelected)
			{
				this.setBorder(selectedBorder);
				this.setOpaque(true);
				this.setBackground(Color.CYAN);
			}
			else
			{
				this.setBorder(unselectedBorder);
			}
			
			
			
			if(value == null)
			{
				this.setText("");
				this.setOpaque(false);
			}
			else
			{
				
				if(knownvalues.containsKey(column))
				{
					Set<String> dict = knownvalues.get(column);
					String temp = value.toString();
					
					Iterator iter = dict.iterator();
					
					//System.out.println(dict.toString());
					temp = temp.toUpperCase();
					//System.out.println(temp);
					
					if(!dict.contains(temp))
					{
						this.setOpaque(true);
						this.setBackground(Color.RED);
					}
					else
					{
						this.setOpaque(false);
					}
				}
				
				
				
				/*String temp = value.toString();
				if(temp.equals("Maxwell"))
				{
					this.setOpaque(true);
					this.setBackground(Color.RED);
				}
				else
				{
					this.setOpaque(false);
				}*/
				this.setText(value.toString());
			}
			
			if(hasFocus)
			{
				if(column > 0)
				{
					bs.updateCell(row, column);
					this.setOpaque(true);
					this.setBackground(Color.BLUE);
				}
				if(value != null)
				{
					System.out.println(value.toString());
					
				}
			}
			
			return this;
		}
		
	}
	
	private FocusListener focus = new FocusListener()
	{

		@Override
		public void focusGained(FocusEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void focusLost(FocusEvent e) {
			// TODO Auto-generated method stub
			
		}
		
	};
	
	class PopupPrintListener implements PopupMenuListener {
		  
		@Override
		public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
			 System.out.println("Popup menu will be visible!");
			
		}

		@Override
		public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
			System.out.println("Popup menu will be invisible!");
			
		}

		@Override
		public void popupMenuCanceled(PopupMenuEvent e) {
			System.out.println("Popup menu is hidden!");
			
		}
	  }
}
