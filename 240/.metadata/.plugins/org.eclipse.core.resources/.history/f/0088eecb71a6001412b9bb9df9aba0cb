package listem;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Grep implements IGrep{

	public Grep(){}
	
	@Override
	public Map<File, List<String>> grep(File directory,
			String fileSelectionPattern, String substringSelectionPattern,
			boolean recursive) {
		
		Parent p = new Parent();
		
		
		Map<File, List<String>> mapg = null;
		File[] files = p.Process(directory, fileSelectionPattern);
		
		for(int i=0; i<files.length; i++)
		{
			//List<String> n = new ArrayList<String>();
			try
			  {
				
				
				//String[] names = new String[files.size()];
				//files.toArray(names);
			    BufferedReader reader = new BufferedReader(new FileReader(files[i]));
			    String line;
			    while ((line = reader.readLine()) != null)
			    {
			    	// need to match word pattern with the line.
			    	Pattern pat = Pattern.compile(substringSelectionPattern);
			    	Matcher m = pat.matcher(line);
					boolean b = m.matches();
					if(b)
					{
						if(!mapg.containsKey(files[i]));
						{
							List<String> n = new ArrayList<String>();
							mapg.put(files[i], n);
						}
						
						mapg.get(files[i]).add(line);
					}
			    	
			      //records.add(line);
			    }
			    //reader.close();
			    //return records;
			  }
			  catch (Exception e)
			  {
			    System.err.format("Exception occurred trying to read '%s'.", files[i]);
			    e.printStackTrace();
			    return null;
			  }
		}
		
		System.out.println(mapg.size());
		return mapg;
	}
	
	

}
