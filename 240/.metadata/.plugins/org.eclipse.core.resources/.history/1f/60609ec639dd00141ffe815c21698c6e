package client;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;

import server.communicator.ClientCommunicator;
import server.communicator.ClientException;
import shared.communication.DownloadBatchOutput;
import shared.communication.ValidateUserInput;
import shared.communication.ValidateUserOutput;
import shared.communication.getProjectsOutput;
import shared.model.project;

public class MainFrame extends JDialog implements ActionListener{
	
	JMenuBar menubar;
	JMenu menu;
	JSplitPane split;
	
	
	JOptionPane op = new JOptionPane();
	getProjectsOutput plist;
	ClientCommunicator cc;
	ValidateUserInput person;
	BatchState bs;
	
	JMenuItem download = new JMenuItem("Download Batch");
	JMenuItem logout = new JMenuItem("Logout");
	
	public MainFrame(JFrame frame, ClientCommunicator c, ValidateUserInput p, getProjectsOutput pl)
	{
		
		super(frame, "Indexer", true);
		plist = pl;
		person = p;
		cc = c;
		
		setDefaultCloseOperation(HIDE_ON_CLOSE);
		setResizable(true);
		setLayout(new BorderLayout());
		CreateMenu();
		//image.addPicture("http://drbunsen.cs.byu.edu:4111/Records/images/1890_image0.png");
		split = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
		
		
		try {
			ValidateUserOutput man = cc.ValidateUser(person.getUsername(), person.getPassword());
			if(man.getBID()>-1)
			{
				logout.setEnabled(false);
				bs = new BatchState(this, person.getUsername());
				bs.load();
				//Load up batch state
			}
			else
			{
				setSize(1400,1200);
				Point point = new Point(100,0);
				setLocation(point);
				bs = new BatchState(this, person.getUsername());
			}
			
			
		} catch (ClientException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		add(split);
		
		setVisible(true);
	}
	
	public void CreateMenu()
	{
		menubar = new JMenuBar();
		menu = new JMenu("File");
		
		
		logout.addActionListener(this);
		download.addActionListener(this);
		
		menu.add(logout);
		menu.add(download);
		
		menubar.add(menu);
		setJMenuBar(menubar);
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == download)
		{
			((Component) e.getSource()).setEnabled(false);
			List<project> pros = plist.getProjects();
			String[] projects = new String[pros.size()];
			for(int i=0; i<pros.size(); i++)
			{
				String name = pros.get(i).getTitle();
				projects[i] = name;
			}
			
			JFrame frame = new JFrame("Projects");
			String project = (String) op.showInputDialog(frame,
					"Please choose a Project",
					"Projects",
					JOptionPane.QUESTION_MESSAGE,
					null,
					projects,
					projects[0]
					);
			
			int proID = -1;
			for(int i=0; i<pros.size(); i++)
			{
				if(project.equals(pros.get(i).getTitle()))
				{
					proID = pros.get(i).getPersonalID();
				}
			}
			
			try {
				DownloadBatchOutput dbo = cc.DownloadBatch(person.getUsername(), person.getPassword(), proID);
				bs.setDBO(dbo);
				String u = dbo.getUrl();
				bs.setURL(u);
				project p = dbo.getProject();
				int rh = p.getRecordheight();
				int firsty = p.getFirstycoord();
				bs.image.addPicture(u, rh, firsty, dbo.getFields());
				
				
				
				
				bs.setTopComponent();
				
				
				//split.setTopComponent(image);
				bs.bp.tf.table.initialize(dbo.getNumofRecords(), dbo.getFields());
				bs.bp.tf.form.initialize();
				
				bs.setBottomComponent();
				//split.setBottomComponent(bp);
				revalidate();
				
			} catch (ClientException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}
		else if(e.getSource() == logout)
		{
			
//			bs.setPoint(this.getLocation());
//			bs.setWindowsize(this.getSize());
//			bs.setSplit1(split.getDividerLocation());
			
			bs.write();
			setVisible(false);
		}
		
	}

}
